using System.Linq;
using Content.Shared.Administration;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.LineEdit;

namespace Content.Client.Administration.UI.Tabs.AdminTab
{
    [GenerateTypedNameReferences]
    [UsedImplicitly]
    public sealed partial class JobBanWindow : DefaultWindow
    {
        public JobBanWindow()
        {
            RobustXamlLoader.Load(this);
            PlayerNameLine.OnTextChanged += _ => OnPlayerNameChanged();
            JobNameLine.OnTextChanged += _ => OnJobNameChanged();
            PlayerList.OnSelectionChanged += OnPlayerSelectionChanged;
            SubmitButtonByName.OnPressed += SubmitButtonByNameOnPressed;
            SubmitButtonList.OnPressed += SubmitButtonListOnPressed;
            MinutesLine.OnTextChanged += UpdateButtonsText;
            HourButton.OnPressed += _ => AddMinutes(60);
            DayButton.OnPressed += _ => AddMinutes(1440);
            WeekButton.OnPressed += _ => AddMinutes(10080);
            MonthButton.OnPressed += _ => AddMinutes(43200);
            // Command
            Captain.OnPressed += _ =>
            {
                if (Captain.Pressed)
                    banList.Add(Captain);
                else
                    banList.Remove(Captain);
            };
            HeadOfPersonnel.OnPressed += _ =>
            {
                if (HeadOfPersonnel.Pressed)
                    banList.Add(HeadOfPersonnel);
                else
                    banList.Remove(HeadOfPersonnel);
            };
            HeadOfSecurity.OnPressed += _ =>
            {
                if (HeadOfSecurity.Pressed)
                    banList.Add(HeadOfSecurity);
                else
                    banList.Remove(HeadOfSecurity);
            };
            ChiefMedicalOfficer.OnPressed += _ =>
            {
                if (ChiefMedicalOfficer.Pressed)
                    banList.Add(ChiefMedicalOfficer);
                else
                    banList.Remove(ChiefMedicalOfficer);
            };
            ChiefEngineer.OnPressed += _ =>
            {
                if (ChiefEngineer.Pressed)
                    banList.Add(ChiefEngineer);
                else
                    banList.Remove(ChiefEngineer);
            };
            Quartermaster.OnPressed += _ =>
            {
                if (Quartermaster.Pressed)
                    banList.Add(Quartermaster);
                else
                    banList.Remove(Quartermaster);
            };
            ResearchDirector.OnPressed += _ =>
            {
                if (ResearchDirector.Pressed)
                    banList.Add(ResearchDirector);
                else
                    banList.Remove(ResearchDirector);
            };
            // Security
            Warden.OnPressed += _ =>
            {
                if (Warden.Pressed)
                    banList.Add(Warden);
                else
                    banList.Remove(Warden);
            };
            SecurityOfficer.OnPressed += _ =>
            {
                if (SecurityOfficer.Pressed)
                    banList.Add(SecurityOfficer);
                else
                    banList.Remove(SecurityOfficer);
            };
            Detective.OnPressed += _ =>
            {
                if (Detective.Pressed)
                    banList.Add(Detective);
                else
                    banList.Remove(Detective);
            };
            SecurityCadet.OnPressed += _ =>
            {
                if (SecurityCadet.Pressed)
                    banList.Add(SecurityCadet);
                else
                    banList.Remove(SecurityCadet);
            };
            // Medical
            Chemist.OnPressed += _ =>
            {
                if (Chemist.Pressed)
                    banList.Add(Chemist);
                else
                    banList.Remove(Chemist);
            };
            MedicalDoctor.OnPressed += _ =>
            {
                if (MedicalDoctor.Pressed)
                    banList.Add(MedicalDoctor);
                else
                    banList.Remove(MedicalDoctor);
            };
            MedicalIntern.OnPressed += _ =>
            {
                if (MedicalIntern.Pressed)
                    banList.Add(MedicalIntern);
                else
                    banList.Remove(MedicalIntern);
            };
            // Engineering
            AtmosphericTechnician.OnPressed += _ =>
            {
                if (AtmosphericTechnician.Pressed)
                    banList.Add(AtmosphericTechnician);
                else
                    banList.Remove(AtmosphericTechnician);
            };
            StationEngineer.OnPressed += _ =>
            {
                if (StationEngineer.Pressed)
                    banList.Add(StationEngineer);
                else
                    banList.Remove(StationEngineer);
            };
            TechnicalAssistant.OnPressed += _ =>
            {
                if (TechnicalAssistant.Pressed)
                    banList.Add(TechnicalAssistant);
                else
                    banList.Remove(TechnicalAssistant);
            };
            // Cargo
            CargoTechnician.OnPressed += _ =>
            {
                if (CargoTechnician.Pressed)
                    banList.Add(CargoTechnician);
                else
                    banList.Remove(CargoTechnician);
            };
            SalvageSpecialist.OnPressed += _ =>
            {
                if (SalvageSpecialist.Pressed)
                    banList.Add(SalvageSpecialist);
                else
                    banList.Remove(SalvageSpecialist);
            };
            // Scientific
            Scientist.OnPressed += _ =>
            {
                if (Scientist.Pressed)
                    banList.Add(Scientist);
                else
                    banList.Remove(Scientist);
            };
            // Juridical
            Lawyer.OnPressed += _ =>
            {
                if (Lawyer.Pressed)
                    banList.Add(Lawyer);
                else
                    banList.Remove(Lawyer);
            };
            // Civilian and Service
            ServiceWorker.OnPressed += _ =>
            {
                if (ServiceWorker.Pressed)
                    banList.Add(ServiceWorker);
                else
                    banList.Remove(ServiceWorker);
            };
            Botanist.OnPressed += _ =>
            {
                if (Botanist.Pressed)
                    banList.Add(Botanist);
                else
                    banList.Remove(Botanist);
            };
            Chef.OnPressed += _ =>
            {
                if (Chef.Pressed)
                    banList.Add(Chef);
                else
                    banList.Remove(Chef);
            };
            Bartender.OnPressed += _ =>
            {
                if (Bartender.Pressed)
                    banList.Add(Bartender);
                else
                    banList.Remove(Bartender);
            };
            Janitor.OnPressed += _ =>
            {
                if (Janitor.Pressed)
                    banList.Add(Janitor);
                else
                    banList.Remove(Janitor);
            };
            Clown.OnPressed += _ =>
            {
                if (Clown.Pressed)
                    banList.Add(Clown);
                else
                    banList.Remove(Clown);
            };
            Mime.OnPressed += _ =>
            {
                if (Mime.Pressed)
                    banList.Add(Mime);
                else
                    banList.Remove(Mime);
            };
            Librarian.OnPressed += _ =>
            {
                if (Librarian.Pressed)
                    banList.Add(Librarian);
                else
                    banList.Remove(Librarian);
            };
            Musician.OnPressed += _ =>
            {
                if (Musician.Pressed)
                    banList.Add(Musician);
                else
                    banList.Remove(Musician);
            };
            Chaplain.OnPressed += _ =>
            {
                if (Chaplain.Pressed)
                    banList.Add(Chaplain);
                else
                    banList.Remove(Chaplain);
            };
        }

        private List<CheckBox> banList = new() { };

        private bool TryGetMinutes(string str, out uint minutes)
        {
            if (string.IsNullOrWhiteSpace(str))
            {
                minutes = 0;
                return true;
            }

            return uint.TryParse(str, out minutes);
        }

        private void AddMinutes(uint add)
        {
            if (!TryGetMinutes(MinutesLine.Text, out var minutes))
                return;

            MinutesLine.Text = $"{minutes + add}";
            UpdateButtons(minutes + add);
        }

        private void UpdateButtonsText(LineEditEventArgs obj)
        {
            if (!TryGetMinutes(obj.Text, out var minutes))
                return;
            UpdateButtons(minutes);
        }

        private void UpdateButtons(uint minutes)
        {
            HourButton.Text = $"+1h ({minutes / 60})";
            DayButton.Text = $"+1d ({minutes / 1440})";
            WeekButton.Text = $"+1w ({minutes / 10080})";
            MonthButton.Text = $"+1M ({minutes / 43200})";
        }

        private void OnPlayerNameChanged()
        {
            SubmitButtonByName.Disabled = string.IsNullOrEmpty(PlayerNameLine.Text);
            SubmitButtonList.Disabled = string.IsNullOrEmpty(PlayerNameLine.Text);
        }

        private void OnJobNameChanged()
        {
            SubmitButtonByName.Disabled = string.IsNullOrEmpty(JobNameLine.Text);
        }

        public void OnPlayerSelectionChanged(PlayerInfo? player)
        {
            PlayerNameLine.Text = player?.Username ?? string.Empty;
            OnPlayerNameChanged();
        }

        private void SubmitButtonByNameOnPressed(BaseButton.ButtonEventArgs obj)
        {
            // Small verification if Player Name exists
            IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand(
                $"roleban \"{PlayerNameLine.Text}\" \"{JobNameLine.Text}\" \"{CommandParsing.Escape(ReasonLine.Text)}\" {MinutesLine.Text}");
        }

        private void SubmitButtonListOnPressed(BaseButton.ButtonEventArgs obj)
        {
            for (int i = 0; i < banList.Count; i++)
            {
                IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand(
                    $"roleban \"{PlayerNameLine.Text}\" \"{banList[i].Name}\" \"{CommandParsing.Escape(ReasonLine.Text)}\" {MinutesLine.Text}");
            }
        }
    }
}
