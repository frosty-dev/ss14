using System.Linq;
using Content.Shared.Administration;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.LineEdit;

namespace Content.Client.Administration.UI.Tabs.AdminTab
{
    [GenerateTypedNameReferences]
    [UsedImplicitly]
    public sealed partial class JobBanWindow : DefaultWindow
    {
        private List<CheckBox> _banList = new() { };
        public JobBanWindow()
        {
            RobustXamlLoader.Load(this);
            PlayerNameLine.OnTextChanged += _ => OnPlayerNameChanged();
            JobNameLine.OnTextChanged += _ => OnJobNameChanged();
            PlayerList.OnSelectionChanged += OnPlayerSelectionChanged;
            SubmitButtonByName.OnPressed += SubmitButtonByNameOnPressed;
            SubmitButtonList.OnPressed += SubmitButtonListOnPressed;
            MinutesLine.OnTextChanged += UpdateButtonsText;
            HourButton.OnPressed += _ => AddMinutes(60);
            DayButton.OnPressed += _ => AddMinutes(1440);
            WeekButton.OnPressed += _ => AddMinutes(10080);
            MonthButton.OnPressed += _ => AddMinutes(43200);
            // Command
            Captain.OnPressed += _ => CheckBoxOnPressed(Captain);
            HeadOfPersonnel.OnPressed += _ => CheckBoxOnPressed(HeadOfPersonnel);
            HeadOfSecurity.OnPressed += _ => CheckBoxOnPressed(HeadOfSecurity);
            ChiefMedicalOfficer.OnPressed += _ => CheckBoxOnPressed(ChiefMedicalOfficer);
            ChiefEngineer.OnPressed += _ => CheckBoxOnPressed(ChiefEngineer);
            Quartermaster.OnPressed += _ => CheckBoxOnPressed(Quartermaster);
            ResearchDirector.OnPressed += _ => CheckBoxOnPressed(ResearchDirector);
            // Security
            Warden.OnPressed += _ => CheckBoxOnPressed(Warden);
            SecurityOfficer.OnPressed += _ => CheckBoxOnPressed(SecurityOfficer);
            Detective.OnPressed += _ => CheckBoxOnPressed(Detective);
            SecurityCadet.OnPressed += _ => CheckBoxOnPressed(SecurityCadet);
            // Medical
            Chemist.OnPressed += _ => CheckBoxOnPressed(Chemist);
            MedicalDoctor.OnPressed += _ => CheckBoxOnPressed(MedicalDoctor);
            Psychologist.OnPressed += _ => CheckBoxOnPressed(Psychologist);
            MedicalIntern.OnPressed += _ => CheckBoxOnPressed(MedicalIntern);
            // Engineering
            AtmosphericTechnician.OnPressed += _ => CheckBoxOnPressed(AtmosphericTechnician);
            StationEngineer.OnPressed += _ => CheckBoxOnPressed(StationEngineer);
            TechnicalAssistant.OnPressed += _ => CheckBoxOnPressed(TechnicalAssistant);
            // Cargo
            CargoTechnician.OnPressed += _ => CheckBoxOnPressed(CargoTechnician);
            SalvageSpecialist.OnPressed += _ => CheckBoxOnPressed(SalvageSpecialist);
            // Scientific
            Scientist.OnPressed += _ => CheckBoxOnPressed(Scientist);
            // Juridical
            Lawyer.OnPressed += _ => CheckBoxOnPressed(Lawyer);
            // Civilian and Service
            ServiceWorker.OnPressed += _ => CheckBoxOnPressed(ServiceWorker);
            Botanist.OnPressed += _ => CheckBoxOnPressed(Botanist);
            Chef.OnPressed += _ => CheckBoxOnPressed(Chef);
            Bartender.OnPressed += _ => CheckBoxOnPressed(Bartender);
            Janitor.OnPressed += _ => CheckBoxOnPressed(Janitor);
            Clown.OnPressed += _ => CheckBoxOnPressed(Clown);
            Librarian.OnPressed += _ => CheckBoxOnPressed(Librarian);
            Musician.OnPressed += _ => CheckBoxOnPressed(Musician);
            Chaplain.OnPressed += _ => CheckBoxOnPressed(Chaplain);
            Zookeeper.OnPressed += _ => CheckBoxOnPressed(Zookeeper);
            OnPlayerNameChanged();
            OnJobNameChanged();
        }

        private void CheckBoxOnPressed(CheckBox checkBox)
        {
            if (checkBox.Pressed)
                _banList.Add(checkBox);
            else
                _banList.Remove(checkBox);
        }
        private bool TryGetMinutes(string str, out uint minutes)
        {
            if (string.IsNullOrWhiteSpace(str))
            {
                minutes = 0;
                return true;
            }

            return uint.TryParse(str, out minutes);
        }

        private void AddMinutes(uint add)
        {
            if (!TryGetMinutes(MinutesLine.Text, out var minutes))
                return;

            MinutesLine.Text = $"{minutes + add}";
            UpdateButtons(minutes + add);
        }

        private void UpdateButtonsText(LineEditEventArgs obj)
        {
            if (!TryGetMinutes(obj.Text, out var minutes))
                return;
            UpdateButtons(minutes);
        }

        private void UpdateButtons(uint minutes)
        {
            HourButton.Text = $"+1h ({minutes / 60})";
            DayButton.Text = $"+1d ({minutes / 1440})";
            WeekButton.Text = $"+1w ({minutes / 10080})";
            MonthButton.Text = $"+1M ({minutes / 43200})";
        }

        private void OnPlayerNameChanged()
        {
            SubmitButtonByName.Disabled = string.IsNullOrEmpty(PlayerNameLine.Text);
            SubmitButtonList.Disabled = string.IsNullOrEmpty(PlayerNameLine.Text);
        }

        private void OnJobNameChanged()
        {
            SubmitButtonByName.Disabled = string.IsNullOrEmpty(JobNameLine.Text);
        }

        public void OnPlayerSelectionChanged(PlayerInfo? player)
        {
            PlayerNameLine.Text = player?.Username ?? string.Empty;
            OnPlayerNameChanged();
        }

        private void SubmitButtonByNameOnPressed(BaseButton.ButtonEventArgs obj)
        {
            // Small verification if Player Name exists
            IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand(
                $"roleban \"{PlayerNameLine.Text}\" \"{JobNameLine.Text}\" \"{CommandParsing.Escape(ReasonLine.Text)}\" {MinutesLine.Text}");
        }

        private void SubmitButtonListOnPressed(BaseButton.ButtonEventArgs obj)
        {
            // Command Department Ban
            if (_banList.Contains(Captain) && _banList.Contains(HeadOfPersonnel) && _banList.Contains(HeadOfSecurity) &&
                _banList.Contains(ChiefMedicalOfficer) && _banList.Contains(ChiefEngineer) &&
                _banList.Contains(Quartermaster) && _banList.Contains(ResearchDirector))
            {
                IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand($"departmentban \"{PlayerNameLine.Text}\" \"Command\" \"{CommandParsing.Escape(ReasonLine.Text)}\" {MinutesLine.Text}");
                _banList.Remove(Captain);
                Captain.Pressed = false;
                _banList.Remove(HeadOfPersonnel);
                HeadOfPersonnel.Pressed = false;
                _banList.Remove(HeadOfSecurity);
                HeadOfSecurity.Pressed = false;
                _banList.Remove(ChiefMedicalOfficer);
                ChiefMedicalOfficer.Pressed = false;
                _banList.Remove(ChiefEngineer);
                ChiefEngineer.Pressed = false;
                _banList.Remove(Quartermaster);
                Quartermaster.Pressed = false;
                _banList.Remove(ResearchDirector);
                ResearchDirector.Pressed = false;
            }
            // Security Department Ban
            if (_banList.Contains(HeadOfSecurity) && _banList.Contains(Warden) && _banList.Contains(SecurityOfficer) &&
                _banList.Contains(Detective) && _banList.Contains(SecurityCadet))
            {
                IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand($"departmentban \"{PlayerNameLine.Text}\" \"Security\" \"{CommandParsing.Escape(ReasonLine.Text)}\" {MinutesLine.Text}");
                _banList.Remove(HeadOfSecurity);
                HeadOfSecurity.Pressed = false;
                _banList.Remove(Warden);
                Warden.Pressed = false;
                _banList.Remove(SecurityOfficer);
                SecurityOfficer.Pressed = false;
                _banList.Remove(Detective);
                Detective.Pressed = false;
                _banList.Remove(SecurityCadet);
                SecurityCadet.Pressed = false;
            }
            // Medical Department Ban
            if (_banList.Contains(ChiefMedicalOfficer) && _banList.Contains(Chemist) && _banList.Contains(MedicalDoctor) &&
                _banList.Contains(MedicalIntern))
            {
                IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand($"departmentban \"{PlayerNameLine.Text}\" \"Medical\" \"{CommandParsing.Escape(ReasonLine.Text)}\" {MinutesLine.Text}");
                _banList.Remove(ChiefMedicalOfficer);
                ChiefMedicalOfficer.Pressed = false;
                _banList.Remove(Chemist);
                Chemist.Pressed = false;
                _banList.Remove(MedicalDoctor);
                MedicalDoctor.Pressed = false;
                _banList.Remove(Psychologist);
                Psychologist.Pressed = false;
                _banList.Remove(MedicalIntern);
                MedicalIntern.Pressed = false;
            }
            // Engineering Department Ban
            if (_banList.Contains(ChiefEngineer) && _banList.Contains(AtmosphericTechnician) &&
                _banList.Contains(StationEngineer) && _banList.Contains(TechnicalAssistant))
            {
                IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand($"departmentban \"{PlayerNameLine.Text}\" \"Engineering\" \"{CommandParsing.Escape(ReasonLine.Text)}\" {MinutesLine.Text}");
                _banList.Remove(ChiefEngineer);
                ChiefEngineer.Pressed = false;
                _banList.Remove(AtmosphericTechnician);
                AtmosphericTechnician.Pressed = false;
                _banList.Remove(StationEngineer);
                StationEngineer.Pressed = false;
                _banList.Remove(TechnicalAssistant);
                TechnicalAssistant.Pressed = false;
            }
            // Cargo Department Ban
            if (_banList.Contains(Quartermaster) && _banList.Contains(CargoTechnician) &&
                _banList.Contains(SalvageSpecialist))
            {
                IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand($"departmentban \"{PlayerNameLine.Text}\" \"Cargo\" \"{CommandParsing.Escape(ReasonLine.Text)}\" {MinutesLine.Text}");
                _banList.Remove(Quartermaster);
                Quartermaster.Pressed = false;
                _banList.Remove(CargoTechnician);
                CargoTechnician.Pressed = false;
                _banList.Remove(SalvageSpecialist);
                SalvageSpecialist.Pressed = false;
            }
            // Scientific Department Ban
            if (_banList.Contains(ResearchDirector) && _banList.Contains(Scientist))
            {
                IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand($"departmentban \"{PlayerNameLine.Text}\" \"Science\" \"{CommandParsing.Escape(ReasonLine.Text)}\" {MinutesLine.Text}");
                _banList.Remove(ResearchDirector);
                ResearchDirector.Pressed = false;
                _banList.Remove(Scientist);
                Scientist.Pressed = false;
            }


            foreach (var job in _banList)
            {
                IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand(
                    $"roleban \"{PlayerNameLine.Text}\" \"{job.Name}\" \"{CommandParsing.Escape(ReasonLine.Text)}\" {MinutesLine.Text}");
                job.Pressed = false;
            }
        }
    }
}
